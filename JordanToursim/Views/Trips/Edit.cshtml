@model JordanToursim.Models.Trip

@{
    ViewBag.Title = "Edit";
}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css" integrity="sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==" crossorigin="anonymous" />
    <style>
        body {
            scroll-behavior: smooth;
        }

        .container body-content {
            width: 1200px
        }
        /*media qoures to display on mobile*/
        @@media (max-width:700px) {
            .imgCover {
                background-image: url('../../Images/TempPic/editPic.png');
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                margin: -120px 0 -70px 0;
                padding: 60px 0 0 0;
                margin-right: 0px;
                width: 395px;
            }

            .body-content {
                width: 400px;
                padding-left: 0;
                padding-right: 0;
            }

            .form-horizontal .form-group {
                margin-right: 15px;
                margin-left: 15px;
                color: #f2f2f2c7;
            }

            .container {
                padding-right: 0;
                padding-left: 0;
                margin-right: 0;
                margin-left: 0;
            }

            .backToMain {
                float: right;
                padding-right: 30px;
                position: relative;
                padding-bottom: 50px;
            }

            .imgCover .form-horizontal .Headerspace {
                height: 20px;
                max-height: 20px;
            }

            #submitTrip {
                visibility: visible !important;
                float: left;
            }
        }
        /*end of mobile view*/



        /*media qoures to display on desktop & laptop*/
        @@media (min-width:1000px) { /* big landscape tablets, laptops, and desktops */
            .imgCover {
                background-image: url('../../Images/TempPic/editPic.png');
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                margin: -70px 0 -70px 0;
            }

            .container body-content {
                width: 1400px;
            }

            .imgCover .form-horizontal .Headerspace {
                height: 140px;
                max-height: 140px;
            }
            .imgCover .form-horizontal .form-group .form-control {
                border-radius: 25px !important;
            }

        }
        /*end of laptop view*/


        /*glore button effect*/

        #submitTrip {
            text-decoration: none;
            color: #fff;
            background: rgba(0, 209, 0, 1);
            padding: 15px 40px;
            border-radius: 4px;
            font-weight: normal;
            text-transform: uppercase;
            transition: all 0.2s ease-in-out;
        }

            #submitTrip:hover {
                color: #fff;
                box-shadow: 0 5px 15px rgba(51, 153, 204, .7);
            }
        /*end of effect*/
    </style>
</head>

<!--Show sucess message-->
@{
    var state = Session["successEdit"];
    if (state == "true")
    {
        Session["successEdit"] = "false";
        <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script>
            function JSalert() {
                Swal.fire({
                    position: 'center',
                    icon: 'success',
                    title: 'trip has edit successfully',
                    showConfirmButton: false,
                    timer: 2000
                })
            }
            JSalert();
        </script>

    }

}

<h1 class="PageTitle" style="font-weight: 600; font-size: 2.5em; color: #5baed0; margin-left:40px !important">Edit Page</h1>
<div>
    <!--show cities and department dropdown Lists-->
    @Html.Action("CitiesDropDown")
</div>
<div class="imgCover">

    @using (Html.BeginForm("Edit", "Trips", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TripId)
        <div class="Headerspace">&nbsp;</div>
        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Trip_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Trip_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Trip_Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Trip_Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Date_Time_From, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Trip_Date_Time_From, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Trip_Date_Time_From, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Date_Time_To, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Trip_Date_Time_To, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Trip_Date_Time_To, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Capacity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Trip_Capacity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Trip_Capacity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.City_Name, Session["citiesList"] as SelectList, "-- Select city --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.City_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Department_Name, Session["DepList"] as SelectList, "-- Select Department --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Department_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ticket_Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Ticket_Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ticket_Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Image_web, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="ImageFileWeb" name="ImageFileWeb" class="form-control" enctype="multipart/form-data" accept="image/png, image/jpeg" required />
                @Html.ValidationMessageFor(model => model.Trip_Image_web, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Trip_Image_phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="ImageFilePhone" name="ImageFilePhone" class="form-control" enctype="multipart/form-data" accept="image/png, image/jpeg" required />
                @Html.ValidationMessageFor(model => model.Trip_Image_phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPublished, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPublished)
                    @Html.ValidationMessageFor(model => model.IsPublished, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BusMovement, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.BusMovement)
                    @Html.ValidationMessageFor(model => model.BusMovement, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Lunch, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Lunch)
                    @Html.ValidationMessageFor(model => model.Lunch, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OvernightStay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.OvernightStay)
                    @Html.ValidationMessageFor(model => model.OvernightStay, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TouristGuide, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.TouristGuide)
                    @Html.ValidationMessageFor(model => model.TouristGuide, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group" style="position:static;">
            <div class="col-md-offset-2 col-md-10">
                <button id="submitTrip" type="submit" value="Edit" class="glow-button btn btn-info btn-circle btn-lg" style="width: 50px; height: 50px; padding: 10px 16px; font-size: 18px; line-height: 1.33; border-radius: 50%;"><i class="fa fa-check" aria-hidden="true"></i></button>
            </div>
        </div>
    </div>
    }
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {

    <!--Date picker to prevent diffrent between start and end data + make sure trip date start from today-->
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"
            type="text/javascript"></script>
    <link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/ui-lightness/jquery-ui.css"
          rel="Stylesheet" type="text/css" />
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.2/anime.min.js"></script>

    <script type="text/javascript">
        $("#Trip_Date_Time_From, #Trip_Date_Time_To").datepicker();

        $("#Trip_Date_Time_To").change(function () {
            var startDate = document.getElementById("Trip_Date_Time_From").value;
            var endDate = document.getElementById("Trip_Date_Time_To").value;

            var today = new Date();
            var CurrentTIme = today.setFullYear;
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();

            CurrentTIme = mm + '/' + dd + '/' + yyyy;

            if ((Date.parse(endDate.Date) <= Date.parse(startDate.Date) || Date.parse(startDate.Date) <= Date.parse(CurrentTIme.Date))) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Attention',
                    text: 'End date should be greater than Start date !',

                })
                document.getElementById("Trip_Date_Time_To").value = "";
            }
        });
        //end of date picker
        //photo fadeIn effect
        $(document).ready(function () {

            $(".imgCover").hide().fadeIn();
            $("#submitTrip").hide();
        });

        //end of effect

        //hide/show submit button on scroll
        $(window).scroll(function () {
            if ($(window).scrollTop() + $(window).height() > $(document).height() - 50)
                $("#submitTrip").css("visibility", "visible").delay("2000").css("opacity", 90);
            else
                $("#submitTrip").css("visibility", "hidden").css("opacity", 50).fadeIn("fast");
        });
        //end of scroll


        //Title head Animation
        var textWrapper = document.querySelector('.PageTitle');
        textWrapper.innerHTML = textWrapper.textContent.replace(/\S/g, "<span class='letter'>$&</span>");

        anime.timeline({ loop: true })
            .add({
                targets: '.PageTitle .letter',
                opacity: [0, 2],
                easing: "easeInOutQuad",
                duration: 2250,
                delay: (el, i) => 170 * (i + 1)
            }).add({
                targets: '.PageTitle',
                opacity: 0,
                duration: 1000,
                easing: "easeOutExpo",
                delay: 1000
            });
                //end of Animation


    </script>
}
